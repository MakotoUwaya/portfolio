<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://makotouwaya.github.io/portfolio/en/blog</id>
    <title>Makoto Uwaya Portfolio Blog</title>
    <updated>2022-01-18T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://makotouwaya.github.io/portfolio/en/blog"/>
    <subtitle>Makoto Uwaya Portfolio Blog</subtitle>
    <icon>https://makotouwaya.github.io/portfolio/en/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Start Docusaurus Blog]]></title>
        <id>start-blog</id>
        <link href="https://makotouwaya.github.io/portfolio/en/blog/start-blog"/>
        <updated>2022-01-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is my first post on Docusaurus 2.]]></summary>
        <content type="html"><![CDATA[<p>残り少ない人生、日記代わりにやったことを書き残していこうと思う</p><p><a href="https://docusaurus.io/docs/blog">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog">blog plugin</a>.</p>]]></content>
        <author>
            <name>Makoto　Uwaya</name>
            <uri>https://github.com/MakotoUwaya</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.NET Core 3.0.100-preview-010177 で WPF-Sample を動かす]]></title>
        <id>/2019/01/27/dotnet-core</id>
        <link href="https://makotouwaya.github.io/portfolio/en/blog/2019/01/27/dotnet-core"/>
        <updated>2019-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[WPF が .NET Core 3 で動くようになりましたね。]]></summary>
        <author>
            <name>Makoto　Uwaya</name>
            <uri>https://github.com/MakotoUwaya</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visual Studio 2017 エディション比較]]></title>
        <id>/2017/12/03/visual-studio-2017-edition</id>
        <link href="https://makotouwaya.github.io/portfolio/en/blog/2017/12/03/visual-studio-2017-edition"/>
        <updated>2017-12-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[記事の目的]]></summary>
        <content type="html"><![CDATA[<h2>記事の目的</h2><p>Visual Studio には3つのエディションがあり、価格と機能が異なります。<br/>
<!-- -->この記事では、各エディションの特徴を整理して、自分の目的に合ったエディションを選択できるようにすることを目的とします。</p><p>:::info
Visual Studio 各エディションの比較 <a href="https://www.visualstudio.com/ja/vs/compare/">https://www.visualstudio.com/ja/vs/compare/</a>
:::</p><h2>無償版(Community)ではできないこと</h2><p>一般的な企業(営利団体従事者)で5名を超える開発者がいる場合、Community は使用できないことになっており、<br/>
<!-- -->Professional か Enterprise を使用する必要があります。</p><blockquote><p>(注) 大学関係者、非営利団体従事者、オープン ソース開発者は人数の制限なく、<br/>
<!-- -->また、中小企業 (PC 台数 250 台未満かつ年商 1 億円未満) においては、最大 5 名までご利用いただけます。<br/>
<!-- -->詳しくは <a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=13350">Visual Studio ライセンス ホワイト ペーパー</a>をご確認ください。</p></blockquote><h2>Professional でできること</h2><p>Community 版と機能的にはほとんど同じです。</p><h3>CodeLens</h3><p><img src="./code-lens.png" alt="CodeLens"/></p><p>コードレンズは、ソースコードを解析して、クラスやプロパティ、メソッドなどの被参照箇所の情報と変更履歴情報が表示される機能です。<br/>
<!-- -->「自分の作るアプリケーションは、規模も小さいしそもそも一人でやっている」という方は一見必要のない機能に見えるのですが、<br/>
<!-- -->例えば「このメソッドに修正を加えると、どこに影響するか？」といったケースで影響箇所を調査するとき、参照箇所が数値で表示されているメリットは大きいです。  </p><p>参照数が多ければ、変更したときの確認項目も増える傾向にあるため、実際の開発においては、工数見積の指標(根拠)としても使えます。  </p><p>変更履歴情報については、履歴管理システムと連動して
不具合が発生した時等に何の修正によって事象が発生しているのか、追跡が容易になります。<br/>
<!-- -->また、リリース後にメソッドレベルであまりにも頻繁に変更が行われている場合は何らかの設計不備が疑われるため、見直しを行う契機にもなります。  </p><h2>Enterprise でできること</h2><p>Enterprise は、開発を効率的に進めるための強力な機能を使用できます。<br/>
<!-- -->Professional と Enterprise にはどちらも評価版が存在し、最大で90日間のお試し利用が可能です。  </p><h3>ライブ依存関係検証</h3><p>定義済みの依存関係に違反したコードを書くと、エラーにしてくれる機能です。<br/>
<!-- -->抽象クラスやインターフェースが具象クラスの実装仕様に依存していたり、アセンブリ間の参照関係を崩してしまうような場合に警告を出します。  </p><p>コードのアーキテクチャを理解したメンバーであれば、そもそも不要な依存関係を生まないよう注意してコードを書いているものですが、<br/>
<!-- -->他のメンバーが常にそこまで気を付けて書いてくれる保証はどこにもありません。</p><p>この機能を使うと、コードレビュー前のコンパイル時点で依存関係を乱すコードを見つけることが可能になります。</p><p><img src="./code-map-diagram.png" alt="CodeMap1.dgml"/>
<a href="https://msdn.microsoft.com/ja-jp/library/dd409453.aspx">https://msdn.microsoft.com/ja-jp/library/dd409453.aspx</a></p><h3>アーキテクチャ レイヤー図</h3><p>レイヤー ダイアグラムを作成することができます。</p><p><img src="./arch-layer.png" alt="arch-layer"/>
<a href="https://msdn.microsoft.com/ja-jp/library/dd465141.aspx">https://msdn.microsoft.com/ja-jp/library/dd465141.aspx</a></p><h3>アーキテクチャの検証</h3><p>あまり詳しい説明が見当たらない、、、<br/>
<!-- -->下記の説明をご参照ください。<br/>
<a href="https://msdn.microsoft.com/ja-jp/library/hh871439.aspx">https://msdn.microsoft.com/ja-jp/library/hh871439.aspx</a></p><h3>コード クローン</h3><p>ソースコード量が増えてくると、似たようなコードを量産してしまい修正時のメンテナンスコストが増加するケースがあります。<br/>
<!-- -->コード クローンは2012から追加された機能で、コードが重複している箇所を見つけ出します。</p><p><img src="./clone1.png" alt="Clone1"/></p><p><img src="./clone2.png" alt="Clone2"/></p><p>重複箇所を抽象化して分離できれば、規模が大きくなってもメンテナンスしやすいコードを維持できます。</p><p><a href="https://channel9.msdn.com/Series/Visual-Studio-2012-Premium-and-Ultimate-Overview-JPN/Visual-Studio-Ultimate-2012-Finding-and-managing-cloned-code-JPN">https://channel9.msdn.com/Series/Visual-Studio-2012-Premium-and-Ultimate-Overview-JPN/Visual-Studio-Ultimate-2012-Finding-and-managing-cloned-code-JPN</a></p><h3>IntelliTrace</h3><p>トラブルシューティングで、なかなか事象が再現できず困ったとき、実行中に発生している例外やイベントからヒントを得る必要があります。<br/>
<!-- -->そんなときは、IntelliTraceの機能を使うと後から問題のあった箇所の呼び出し履歴を確認できます。<br/>
<!-- -->どのメソッド呼出で例外が起きるのか、ステップ実行して追跡する必要はありません。  </p><p>また、私は試したことはありませんが、下記のように開発者以外のPCにおいてもイベント収集が可能となっています。<br/>
<!-- -->ユーザー環境にリリースした後、ユーザーサポートの対応中にどうしても事象を再現できず解決に至らない場合、こういったツールが力を発揮するかも知れません。  </p><blockquote><p>IntelliTrace には、Visual Studio を接続できない他の環境に配置できる、スタンドアロン コレクターもあります。<br/>
<!-- -->インストール処理を実行しないので、管理者の抵抗を受ける心配は不要です。<br/>
<!-- -->ターゲット環境にコレクターをコピーできるかどうかかどうかだけが問題です。<br/>
<!-- -->コレクターでは、アプリケーションの実行が .itrace ファイルに記録されます。<br/>
<!-- -->開発者はこのファイルを開発コンピューターに転送して Visual Studio で開くことができます。<br/>
<!-- -->このシナリオは、デバッグ中にアプリケーションの実行を制御できないので、&quot;非ライブ デバッグ&quot; と呼ばれます。<br/>
<!-- -->IntelliTrace スタンドアロン コレクターの使用法に関する最新情報については、<a href="http://aka.ms/itracecollector">aka.ms/itracecollector</a> (英語) を参照してください。</p></blockquote><p><a href="https://msdn.microsoft.com/ja-jp/magazine/dn973014.aspx">https://msdn.microsoft.com/ja-jp/magazine/dn973014.aspx</a></p><h3>コード マップ デバッガーの統合</h3><p>Professional で利用可能な CodeLens 機能は、該当するクラスやメソッドの利用箇所を表示してくれます。<br/>
<!-- -->コードマップは、この表示をさらにグラフィカルに表示し、影響範囲の全体像を確認することが可能です。</p><p><img src="./code-map-debugger.png" alt="Code Map Debugger"/></p><p><a href="https://msdn.microsoft.com/ja-jp/library/jj739835.aspx">https://msdn.microsoft.com/ja-jp/library/jj739835.aspx</a></p><h3>.NET メモリ ダンプ分析</h3><p>.NET アプリケーション(4.5以上が対象)のヒープメモリデバッグを行う機能です。<br/>
<!-- -->メモリ利用状況に意図しない問題が発生している場合、メモリダンプを取得してどのオブジェクトがメモリを使用しているか、適切なGCが行われているかといった確認を行うことができます。  </p><p><a href="https://msdn.microsoft.com/ja-jp/library/dn342825.aspx">https://msdn.microsoft.com/ja-jp/library/dn342825.aspx</a></p><h3>Live Unit Testing</h3><p>2017の目玉機能の一つです。  </p><p>TDD(テスト駆動開発)を進めるために、まず単体テストを書き、その単体テストをパスするための最低限のプログラムコードを書き、<br/>
<!-- -->全てのテストが通るようになったらリファクタリングを行い、リファクタリングが終われば次の機能の単体テストを書く、、、<br/>
<!-- -->というサイクルにおいて、 Live Unit Testing を有効にしておくと、書いたコードによってテスト結果がどう変わったかをリアルタイムに評価してくれます。  </p><p>開発コストを下げるためには、なるべく早い工程で間違い(バグ)を検出して修正してしまうことが有効であると言われており、事実コストにも如実に反映します。</p><p>もしもユーザーにリリースした後に問題が発覚すれば、コードの修正だけではなく影響調査を行い関連する範囲も含めた再テストや、<br/>
<!-- -->再リリース(社内規定に従ったリリース手続きの再実施)、ユーザー周知など、作業だけでも大変な手戻りが発生するとともに、<br/>
<!-- -->信頼の低下、ユーザー離れなど、ビジネスの機会損失にも繋がりかねません。  </p><p>いかに開発の早い段階で問題を検出するか、という取り組みは<br/>
<!-- -->ShiftLeft と呼ばれており、プロジェクト管理界隈でも標準的な考え方として取り入れられています。  </p><p>慣れないうちは、単体テストから機能を作っていく作業を煩わしく感じてしまいついつい機能から先に作って、後からテストを作成するといった進め方に<br/>
<!-- -->なってしまうことが多いと思われますが、単体テストを先に書くことで、何を意図した機能なのかが明確になり、テスト可能な形で処理分割を強制されるため、<br/>
<!-- -->自ずと単一責務の原則(SOLID原則のS)を意識したコードになります。  </p><p>Live Unit Testing が無いときは、単体テストが通ることを定期的に実行して確認しなくてはなりませんでした。<br/>
<!-- -->この機能によってリアルタイムでテストが行われて結果が表示されるため、どの修正によってテストが通らなくなったのかが瞬時に判明します。  </p><p>ぜひ、試用版で効果を確認してみて下さい。</p><h3>テスト ケース管理</h3><p>TFSのテストマネージャありきの機能になりますが、特定機能のテストシナリオに対して単体テストを紐づけて管理することが可能になります。<br/>
<!-- -->バグ修正後のリグレッションテストなどで効果を発揮する機能と言えます。</p><p><a href="https://msdn.microsoft.com/ja-jp/library/dd380741.aspx">https://msdn.microsoft.com/ja-jp/library/dd380741.aspx</a></p><h3>Web ロードおよびパフォーマンス テスト</h3><p>Webアプリケーションに対して、負荷テストを行うことができます。<br/>
<!-- -->ブラウザアプリケーションだけでなく、WebAPIに対しても負荷の高い状態でどの程度のパフォーマンスが出るのか計測することができます。  </p><p>この機能は主にサーバサイドのパフォーマンスを計測するもので、クライアントサイドのパフォーマンスは他の方法で計測を行う必要があることに注意してください。    </p><h3>IntelliTest</h3><p>Live Unit Testing の項では、先に単体テストコードを書くことの重要性について説明しました。<br/>
<!-- -->しかし、既に商用としてリリースされているアプリケーションで、テストカバレッジが低い上に単体テストが書きにくいアプリケーションを預かり<br/>
<!-- -->メンテナンスしなければならないケースもあると思います。</p><p>そういった場合に、機能を追加したり、リファクタリングを行うだけで既存の機能を壊してしまうことが往々にして発生します。<br/>
<!-- -->これを防ぐためには、既存のコードに対して単体テストを書いてから修正を行うというアプローチが考えられます。  </p><p>しかし、これを手作業で行うには思ったよりも手間がかかります。<br/>
<!-- -->まず、テストが成功したとしても本当に仕様通りなのか判断することができず、密結合されたクラスがあれば、影響箇所全てのテストを書く必要があり、<br/>
<!-- -->もし一部のクラスについてテストを書かなかった場合に、致命的な影響が出ていても気づくことができません。  </p><p>そこで、これまでに紹介した機能を使って修正対象のクラスを参照するすべての箇所について、<br/>
<!-- -->IntelliTest を使って単体テストを自動生成することで、少しでも修正による不具合発生のリスクを低減することが可能です。  </p><p><a href="https://msdn.microsoft.com/ja-jp/library/dn823749.aspx">https://msdn.microsoft.com/ja-jp/library/dn823749.aspx</a></p><h3>Microsoft Fakes (単体テストの分離)</h3><p>当たり前の話ですが、単体テストは製品版のコードが記述されるまで「失敗」状態から変わることはありません。<br/>
<!-- -->(もしコードを書かずに「成功」となるテストがあれば、 それは単体テストで保障すべき振る舞いではありません)</p><p>しかし、開発の規模によっては、計画上一部の機能は仕様が未確定で、既に仕様が確定した機能から開発するといったことがあります。<br/>
<!-- -->その場合、仕様検討中の機能を前提とした他の機能の単体テストは、前提とする機能が完成するまでテストが「成功」になることは無いのでしょうか？</p><p>いいえ、そんなことをやっていたら非効率です。<br/>
<!-- -->そもそも、単体テストで保障するのは「単体」レベルの機能の振る舞いであって、他の機能と結合したときの動作ではありません。  </p><p>Microsoft Fakes は、まだ未完成の機能や、単体レベルのテストにおいて<br/>
<!-- -->実際に処理を行う必要が無い機能(WebアクセスやDB操作等)を代替する手段を提供します。</p><p>具体的には、テスト対象機能が必要とする具象クラスを、偽装したクラスで置き換えます。<br/>
<!-- -->※例えばWebページのアクセスを偽装して、毎回固定のレスポンスを返すなど<br/>
<!-- -->こうすることで、先に実装した機能の責任範囲だけを単体テストで保障することができ、<br/>
<!-- -->後で他の機能が完成したときに、具象クラスに置き換えても動作することを確認できます。  </p><p><a href="https://msdn.microsoft.com/ja-jp/library/hh549175.aspx">https://msdn.microsoft.com/ja-jp/library/hh549175.aspx</a></p><p>NuGetでも、Moqという代替オブジェクトを生成するライブラリが公開されています。<br/>
<!-- -->Microsoft Fakes はお手軽自動生成、Moqは自由に具象クラスを定義して使うイメージで、どちらが使いやすいかはお好みですね。</p><p><a href="https://github.com/moq/moq4">https://github.com/moq/moq4</a></p><h3>コード カバレッジ</h3><p>記載したコードの動作を単体テストでカバーしている割合を分析します。
カバレッジが品質に与える影響は、一定の割合で頭打ちになると言われており、100％に近づけば近づくほど品質が向上するといったものではありません。</p><p>カバレッジを取得する目的として、「機能を追加したが、単体テストは書いていない」といったコードコミットをカバレッジの低下によって察知し、<br/>
<!-- -->マージ前にコードの品質を推察できるようにすることです。  </p><p>テストを追加せずに機能を追加すれば、カバレッジは低下し、そのコードの品質も評価はできない (良くはない)と言えます。<br/>
<!-- -->カバレッジを分析して、修正によってカバレッジが低下しないことを品質向上のための取り組みとしましょう。</p><h3>Lab Management</h3><p>こちらもTFSありきの機能です。開発したアプリケーションの検証環境構築をサポートする機能なのですが、<br/>
<!-- -->簡単なサンプルを使った検証が難しく、動きを確認できていないため、説明は省略させてください。</p><p><a href="https://msdn.microsoft.com/ja-jp/library/dd936084.aspx">https://msdn.microsoft.com/ja-jp/library/dd936084.aspx</a></p><h3>コード化された UI テスト</h3><p>結合テストレベルのテストをコードで記述して自動実行します。<br/>
<!-- -->UIの操作を記録して、テストコードを自動生成することも可能です。  </p><p><a href="https://msdn.microsoft.com/ja-jp/library/dd286726.aspx">https://msdn.microsoft.com/ja-jp/library/dd286726.aspx</a></p><p>個人的には、MsTestベースで利用できる Friendly もおすすめです。<br/>
<!-- -->Friendlyテストプロセスから、テスト対象のプロセスのメソッド、プロパティ、フィールド全て我が物のように使う事ができます。  </p><p>Friendly・・・お前のものはおれのもの。おれのものもおれのもの。だっておれたち ともだち (Friendly) だろう？<br/>
<a href="http://www.codeer.co.jp/AutoTest">http://www.codeer.co.jp/AutoTest</a></p><h3>クロス プラットフォーム開発</h3><p>主に、<a href="https://docs.microsoft.com/ja-jp/xamarin/get-started/what-is-xamarin">Xamarin</a>を拡張するための機能です。  </p><p>:::tip
<strong>Xamarin</strong>とは<br/>
<!-- -->SharedLibrary や PCLをベースに iOS・Android・UWP でマルチプラットフォーム開発を可能にする製品
:::</p><h4>埋め込みアセンブリ</h4><p>相互運用機能型の情報をアセンブリに埋め込みます。  </p><h4>Xamarin Inspector</h4><p>Xamarinアプリケーションの詳細なデバッグを行うことができます。<br/>
<a href="https://developer.xamarin.com/guides/cross-platform/inspector/">https://developer.xamarin.com/guides/cross-platform/inspector/</a></p><h4>Xamarin Profiler</h4><p>Xamarinアプリケーションのプロファイリングを行うことができます。<br/>
<!-- -->IntelliTrace まではいきませんが、アプリのパフォーマンスに関わる情報や、メモリ・オブジェクトの利用状況を確認することができます。<br/>
<a href="http://ytabuchi.hatenablog.com/entry/2016/08/18/233000">http://ytabuchi.hatenablog.com/entry/2016/08/18/233000</a></p><h4>Remoted iOS Simulator for Window</h4><p>Windows上で iOS アプリのシュミレーションが可能になる機能です。<br/>
<!-- -->Visual StudioがMacに少なくとも1回は接続されていることが前提となっているため、純粋にWindowsしか無い場合は利用できませんのでご注意ください。  </p><p><a href="https://developer.xamarin.com/guides/cross-platform/windows/ios-simulator/">https://developer.xamarin.com/guides/cross-platform/windows/ios-simulator/</a></p><hr/><h2>まとめ</h2><ul><li>PC台数250台以上、または売上1億円以上ならProfessional以上のエディション必須</li><li>CodeLens を使いたいなら Professional</li><li>テストの自動生成など、品質向上機能を使いたいなら Enterprise</li></ul><p>はっきり言って Enterprise のお値段は非常に高いですが、機能は本当に優れていて購入代金以上のメリットを得られる可能性があります。  </p><p>Visual Studio 2017 の新機能については、<a href="https://docs.microsoft.com/ja-jp/visualstudio/ide/whats-new-in-visual-studio">こちら</a>をご確認ください。</p>]]></content>
        <author>
            <name>Makoto　Uwaya</name>
            <uri>https://github.com/MakotoUwaya</uri>
        </author>
    </entry>
</feed>